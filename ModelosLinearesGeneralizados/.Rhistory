beta <- solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
#letra d)
ajuste <- glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
setwd("~/UFMG/6º período/Modelos Lineares Generalizados")
dat = read.table("dados_Q3_L2_MLG.txt")
qchisq(0.95,4)
Z <- qchisq(0.95,4)
pchisq(D, grau_liber,lower.tail = FALSE)
pchisq(D, grau_liber,lower.tail = FALSE)
Z <- qchisq(0.95,4)
theta = seq(0,1,0.01)
vero <- function(theta){
(theta^5)*(1-theta)^10
}
plot(theta, vero(theta))
max(vero(theta))
for (i in 1:length(theta)) {
if (vero(theta[i])==max(vero(theta))){
parametro = theta[i]
break
}
}
parametro
theta = seq(0,1,0.01)
logvero <- function(theta){
5*log(theta) + 10*log(1-theta)
}
plot(theta, logvero(theta))
max(logvero(theta))
for (i in 1:length(theta)) {
if (logvero(theta[i])==max(logvero(theta))){
parametro = theta[i]
break
}
}
parametro
y <- c(1,0,0,1,0,0,0,1,0,0,0,1,0,0,1)
loglik = function(theta,y){
n = length(y)
out = sum(y)*log(theta) + sum(1-y)*log(1-theta)
return(out)
}
grad = function(theta,y){
out=(5/theta) + 10/(1-theta)*(-1)
return(out)
}
chute <- 0.5
ajuste <- optim(par = chute, fn = loglik, gr = grad, y = y,
method = "L-BFGS-B", lower = 0.0001, upper = 0.9999,
control = list(fnscale = -1))
ajuste$par
beta <- c(1,1)
y <- c(7,2,24,33,2,5,2,5,8,8,16,20,11,4,37,1,8,8,5,7,5,4,4,2,26)
x <- matrix(c(rep(1,25),-0.27,0.57,-0.74,-0.94,0.64,0.86,0.5,0.12,-0.36,0.12,-0.55,-0.81,
-0.21,0.53,-1,0.4,-0.07,0.15,-0.13,0.22,0.96,0.45,-0.06,0.97,-0.71),nrow = 25, byrow = F)
W <- matrix(rep(0,25*25), nrow = 25)
for (i in 1:25) {
n <- x[i,]%*%beta
W[i,i] <- exp(n)
}
W[1:5,1:5]
z <- rep(0,25)
for (i in 1:25) {
n <- x[i,]%*%beta
z[i] <- n + (y[i]*exp(-n)) - 1
}
#letra c)
beta <- solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
#letra d)
ajuste <- glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
#letra d)
ajuste <- glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
source("~/UFMG/6º período/Modelos Lineares Generalizados/Lista2.R")
theta = seq(0,1,0.01)
vero <- function(theta){
(theta^5)*(1-theta)^10
}
plot(theta, vero(theta))
max(vero(theta))
for (i in 1:length(theta)) {
if (vero(theta[i])==max(vero(theta))){
parametro = theta[i]
break
}
}
parametro
theta = seq(0,1,0.01)
logvero <- function(theta){
5*log(theta) + 10*log(1-theta)
}
plot(theta, logvero(theta))
max(logvero(theta))
for (i in 1:length(theta)) {
if (logvero(theta[i])==max(logvero(theta))){
parametro = theta[i]
break
}
}
parametro
y <- c(1,0,0,1,0,0,0,1,0,0,0,1,0,0,1)
loglik = function(theta,y){
n = length(y)
out = sum(y)*log(theta) + sum(1-y)*log(1-theta)
return(out)
}
grad = function(theta,y){
out=(5/theta) + 10/(1-theta)*(-1)
return(out)
}
chute <- 0.5
ajuste <- optim(par = chute, fn = loglik, gr = grad, y = y,
method = "L-BFGS-B", lower = 0.0001, upper = 0.9999,
control = list(fnscale = -1))
ajuste$par
beta <- c(1,1)
y <- c(7,2,24,33,2,5,2,5,8,8,16,20,11,4,37,1,8,8,5,7,5,4,4,2,26)
x <- matrix(c(rep(1,25),-0.27,0.57,-0.74,-0.94,0.64,0.86,0.5,0.12,-0.36,0.12,-0.55,-0.81,
-0.21,0.53,-1,0.4,-0.07,0.15,-0.13,0.22,0.96,0.45,-0.06,0.97,-0.71),nrow = 25, byrow = F)
W <- matrix(rep(0,25*25), nrow = 25)
for (i in 1:25) {
n <- x[i,]%*%beta
W[i,i] <- exp(n)
}
W[1:5,1:5]
z <- rep(0,25)
for (i in 1:25) {
n <- x[i,]%*%beta
z[i] <- n + (y[i]*exp(-n)) - 1
}
#letra c)
beta <- solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
#letra d)
ajuste <- glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
ajuste
summary(ajuste)
library(gmodels)
summary(ajuste)
summary(ajuste)
install.packages(c("agricolae", "askpass", "broom", "bslib", "BWStest", "cachem", "classInt", "clock", "cpp11", "curl", "dbplyr", "DEoptimR", "digest", "dplyr", "evaluate", "fansi", "fontawesome", "foreign", "fs", "gargle", "gdata", "ggplot2", "ggrepel", "gmp", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httpuv", "httr", "igraph", "jsonlite", "knitr", "kSamples", "labeling", "labelled", "later", "lme4", "lubridate", "markdown", "Matrix", "MatrixModels", "minqa", "mvtnorm", "openssl", "pkgload", "plyr", "PMCMRplus", "prettyunits", "pROC", "processx", "prodlim", "promises", "psych", "purrr", "quantreg", "ragg", "rbibutils", "Rcpp", "RcppArmadillo", "Rdpack", "readxl", "rematch", "remotes", "rlang", "rmarkdown", "Rmpfr", "robustbase", "rrcov", "rstudioapi", "sass", "shiny", "sp", "styler", "svglite", "sys", "systemfonts", "testthat", "textshaping", "tinytex", "twosamples", "tzdb", "utf8", "uuid", "vctrs", "vroom", "waldo", "withr", "xfun", "xml2"))
summary(ajuste)
y <- c(7,2,24,33,2,5,2,5,8,8,16,20,11,4,37,1,8,8,5,7,5,4,4,2,26)
x <- matrix(c(rep(1,25),-0.27,0.57,-0.74,-0.94,0.64,0.86,0.5,0.12,-0.36,0.12,-0.55,-0.81,
-0.21,0.53,-1,0.4,-0.07,0.15,-0.13,0.22,0.96,0.45,-0.06,0.97,-0.71),nrow = 25, byrow = F)
x
#letra d)
ajuste = glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
theta = seq(0,1,0.01)
theta = seq(0,1,0.01)
vero <- function(theta){
(theta^5)*(1-theta)^10
}
plot(theta, vero(theta))
plot(theta, vero(theta))
max(vero(theta))
for (i in 1:length(theta)) {
if (vero(theta[i])==max(vero(theta))){
parametro = theta[i]
break
}
}
parametro
theta = seq(0,1,0.01)
logvero <- function(theta){
5*log(theta) + 10*log(1-theta)
}
plot(theta, logvero(theta))
max(logvero(theta))
for (i in 1:length(theta)) {
if (logvero(theta[i])==max(logvero(theta))){
parametro = theta[i]
break
}
}
parametro
y <- c(1,0,0,1,0,0,0,1,0,0,0,1,0,0,1)
loglik = function(theta,y){
n = length(y)
out = sum(y)*log(theta) + sum(1-y)*log(1-theta)
return(out)
}
grad = function(theta,y){
out=(5/theta) + 10/(1-theta)*(-1)
return(out)
}
chute <- 0.5
ajuste <- optim(par = chute, fn = loglik, gr = grad, y = y,
method = "L-BFGS-B", lower = 0.0001, upper = 0.9999,
control = list(fnscale = -1))
ajuste$par
beta <- c(1,1)
y <- c(7,2,24,33,2,5,2,5,8,8,16,20,11,4,37,1,8,8,5,7,5,4,4,2,26)
x <- matrix(c(rep(1,25),-0.27,0.57,-0.74,-0.94,0.64,0.86,0.5,0.12,-0.36,0.12,-0.55,-0.81,
-0.21,0.53,-1,0.4,-0.07,0.15,-0.13,0.22,0.96,0.45,-0.06,0.97,-0.71),nrow = 25, byrow = F)
W <- matrix(rep(0,25*25), nrow = 25)
for (i in 1:25) {
n <- x[i,]%*%beta
W[i,i] <- exp(n)
}
W[1:5,1:5]
z <- rep(0,25)
for (i in 1:25) {
n <- x[i,]%*%beta
z[i] <- n + (y[i]*exp(-n)) - 1
}
#letra c)
beta <- solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
#letra d)
ajuste = glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
mi <- exp(predict(ajuste))
D <- 2*sum(y*log(y/mi)-(y-mi))
D
grau_liber <- length(y)-1
grau_liber
pchisq(D, grau_liber,lower.tail = FALSE)
Z <- qchisq(0.95,4)
grau_liber
Z <- qchisq(0.95,24)
Z
D
pchisq(D, grau_liber,lower.tail = FALSE)
pchisq(24, 24,lower.tail = FALSE)
grau_liber
pchisq(D, 24,lower.tail = FALSE)
Z <- qchisq(0.95,24)
Z
Z
D
Z
sum(((y-mi)^2)/mi)
D
pearson <- sum(((y-mi)^2)/mi)
pearson
residuals(ajuste, type = "pearson")
sum(residuals(ajuste, type = "pearson"))
sum((residuals(ajuste, type = "pearson"))^2)
pearson
Zsup <- qchisq(0.95,24)
Zinf <- qchisq(0.90,24)
Zsup
Zinf
D
length(y)-1
grau_liber <- length(y)-2
grau_liber
Zsup <- qchisq(0.95,grau_liber)
Zinf <- qchisq(0.90,grau_liber)
Zsup
Zinf
D
grau_liber
Zsup <- qchisq(0.95,grau_liber)
Zinf <- qchisq(0.90,grau_liber)
Zsup
Zinf
grau_liber
D
Zinf
D
pchisq(D, grau_liber,lower.tail = FALSE)
setwd("~/UFMG/6º período/Modelos Lineares Generalizados")
pearson
pearson
pearson
source("~/UFMG/6º período/Modelos Lineares Generalizados/Lista2.R")
source("~/UFMG/6º período/Modelos Lineares Generalizados/Lista2.R")
pearson
#Lista 2 MLG
#Questão 1
#letra b)
theta = seq(0,1,0.01)
vero <- function(theta){
(theta^5)*(1-theta)^10
}
plot(theta, vero(theta))
max(vero(theta))
for (i in 1:length(theta)) {
if (vero(theta[i])==max(vero(theta))){
parametro = theta[i]
break
}
}
parametro
#letra c)
theta = seq(0,1,0.01)
logvero <- function(theta){
5*log(theta) + 10*log(1-theta)
}
plot(theta, logvero(theta))
max(logvero(theta))
for (i in 1:length(theta)) {
if (logvero(theta[i])==max(logvero(theta))){
parametro = theta[i]
break
}
}
parametro
#letra d)
y <- c(1,0,0,1,0,0,0,1,0,0,0,1,0,0,1)
loglik = function(theta,y){
n = length(y)
out = sum(y)*log(theta) + sum(1-y)*log(1-theta)
return(out)
}
grad = function(theta,y){
out=(5/theta) + 10/(1-theta)*(-1)
return(out)
}
chute <- 0.5
ajuste <- optim(par = chute, fn = loglik, gr = grad, y = y,
method = "L-BFGS-B", lower = 0.0001, upper = 0.9999,
control = list(fnscale = -1))
ajuste$par
#Questão 2
#letra a)
beta <- c(1,1) # p = 2 dois parametros estimados
y <- c(7,2,24,33,2,5,2,5,8,8,16,20,11,4,37,1,8,8,5,7,5,4,4,2,26)
x <- matrix(c(rep(1,25),-0.27,0.57,-0.74,-0.94,0.64,0.86,0.5,0.12,-0.36,0.12,-0.55,-0.81,
-0.21,0.53,-1,0.4,-0.07,0.15,-0.13,0.22,0.96,0.45,-0.06,0.97,-0.71),nrow = 25, byrow = F)
W <- matrix(rep(0,25*25), nrow = 25)
for (i in 1:25) {
n <- x[i,]%*%beta
W[i,i] <- exp(n)
}
W[1:5,1:5]
#letra b)
z <- rep(0,25)
for (i in 1:25) {
n <- x[i,]%*%beta
z[i] <- n + (y[i]*exp(-n)) - 1
}
#letra c)
beta <- solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
#letra d)
ajuste = glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
# os coeficientes são significativos para o modelo
#letra e)
mi <- exp(predict(ajuste))
#preditor <- function(beta,x){
# n <- x%*%beta
#resposta <- exp(n)
#return(resposta)
#}
#beta <- as.numeric(ajuste$coefficients)
#preditor(beta, x)
D <- 2*sum(y*log(y/mi)-(y-mi))
D
grau_liber <- length(y)-2
grau_liber
Zsup <- qchisq(0.95,grau_liber)
Zinf <- qchisq(0.90,grau_liber)
Zsup
Zinf
#Como a D está abaixo do quantil ineferior, conslui-se que possa existir outras covariaveis que explicam mais o modelo.
# pchisq(D, grau_liber,lower.tail = FALSE)
#letra f)
pearson <- sum(((y-mi)^2)/mi)
pearson
# sum((residuals(ajuste, type = "pearson"))^2)
dat = read.table("dados_Q3_L2_MLG.txt")
#materia começou slide 22 (3)e o quatro todo
### Valores reais ###
bet0 = 0.0
bet1 = 3.0
bet2 = -1.0
bet = c(bet0,bet1,bet2)
### Gerando os dados ###
n = 40 # amostra grande.
x1 = rbinom(n,1,0.5);
x2 = rnorm(n,0,sqrt(1));
x = cbind(rep(1,n),x1,x2);
theta = 1/(1+exp(-x%*%bet)) # ligaçao logit.
y = array(0,c(n,1))
for(i in 1:n){ y[i] = rbinom(1, 1, theta[i]) }
#Lista 2 MLG
#Questão 1
#letra b)
theta = seq(0,1,0.01)
vero <- function(theta){
(theta^5)*(1-theta)^10
}
plot(theta, vero(theta))
max(vero(theta))
for (i in 1:length(theta)) {
if (vero(theta[i])==max(vero(theta))){
parametro = theta[i]
break
}
}
parametro
#letra c)
theta = seq(0,1,0.01)
logvero <- function(theta){
5*log(theta) + 10*log(1-theta)
}
plot(theta, logvero(theta))
max(logvero(theta))
for (i in 1:length(theta)) {
if (logvero(theta[i])==max(logvero(theta))){
parametro = theta[i]
break
}
}
parametro
#letra d)
y <- c(1,0,0,1,0,0,0,1,0,0,0,1,0,0,1)
loglik = function(theta,y){
n = length(y)
out = sum(y)*log(theta) + sum(1-y)*log(1-theta)
return(out)
}
grad = function(theta,y){
out=(5/theta) + 10/(1-theta)*(-1)
return(out)
}
chute <- 0.5
ajuste <- optim(par = chute, fn = loglik, gr = grad, y = y,
method = "L-BFGS-B", lower = 0.0001, upper = 0.9999,
control = list(fnscale = -1))
ajuste$par
#Questão 2
#letra a)
beta <- c(1,1) # p = 2 dois parametros estimados
y <- c(7,2,24,33,2,5,2,5,8,8,16,20,11,4,37,1,8,8,5,7,5,4,4,2,26)
x <- matrix(c(rep(1,25),-0.27,0.57,-0.74,-0.94,0.64,0.86,0.5,0.12,-0.36,0.12,-0.55,-0.81,
-0.21,0.53,-1,0.4,-0.07,0.15,-0.13,0.22,0.96,0.45,-0.06,0.97,-0.71),nrow = 25, byrow = F)
W <- matrix(rep(0,25*25), nrow = 25)
for (i in 1:25) {
n <- x[i,]%*%beta
W[i,i] <- exp(n)
}
W[1:5,1:5]
#letra b)
z <- rep(0,25)
for (i in 1:25) {
n <- x[i,]%*%beta
z[i] <- n + (y[i]*exp(-n)) - 1
}
#letra c)
beta <- solve(t(x) %*% W %*% x) %*% t(x) %*% W %*% z
#letra d)
ajuste = glm(y ~ x[,2],
family = poisson(link = "log"),
start = c(1,1))
summary(ajuste)
# os coeficientes são significativos para o modelo
#letra e)
mi <- exp(predict(ajuste))
#preditor <- function(beta,x){
# n <- x%*%beta
#resposta <- exp(n)
#return(resposta)
#}
#beta <- as.numeric(ajuste$coefficients)
#preditor(beta, x)
D <- 2*sum(y*log(y/mi)-(y-mi))
D
grau_liber <- length(y)-2
grau_liber
Zsup <- qchisq(0.95,grau_liber)
Zinf <- qchisq(0.90,grau_liber)
Zsup
Zinf
#Como a D está abaixo do quantil ineferior, conslui-se que possa existir outras covariaveis que explicam mais o modelo.
# pchisq(D, grau_liber,lower.tail = FALSE)
#letra f)
pearson <- sum(((y-mi)^2)/mi)
pearson
# sum((residuals(ajuste, type = "pearson"))^2)
dat = read.table("dados_Q3_L2_MLG.txt")
#materia começou slide 22 (3)e o quatro todo
### Valores reais ###
bet0 = 0.0
bet1 = 3.0
bet2 = -1.0
bet = c(bet0,bet1,bet2)
### Gerando os dados ###
n = 40 # amostra grande.
x1 = rbinom(n,1,0.5);
x2 = rnorm(n,0,sqrt(1));
x = cbind(rep(1,n),x1,x2);
theta = 1/(1+exp(-x%*%bet)) # ligaçao logit.
y = array(0,c(n,1))
for(i in 1:n){ y[i] = rbinom(1, 1, theta[i]) }
pearson
Zsup
Zinf
qchisq(0.95,1)
dat = read.table("dados_Q3_L2_MLG.txt")
dat
dat %>%
mutate( m = 10-V1)
